/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package btl_csdl;

import Chung.Connect;
import Chung.SetCursor;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author trieu_000
 */
public class BenhNhan extends javax.swing.JFrame {

    /**
     * Creates new form BenhNhan
     */
    private static String IDBN;
    private static String IDBS;
    private static BacSi ObJectBacSi;

    private static PreparedStatement stmt;
    private static ResultSet result;
    private static Connection con;

    private DefaultTableModel tableModel;

    public BenhNhan(Object ObJectBacSi, String IDBN) {
        if (!(ObJectBacSi instanceof BacSi)) {
            JOptionPane.showMessageDialog(null, "WARNING: BenhNhan.BS != BacSi");
        }
        this.IDBS = ((BacSi) ObJectBacSi).getIDBS();
        this.ObJectBacSi = (BacSi) ObJectBacSi;

        initComponents();
        this.IDBS = IDBS;
        this.IDBN = IDBN;
        this.setLocationRelativeTo(null);//set frame chinh giua man hinh

        con = new Connect().connect();
        new SetCursor().setCusor(this);

        setTime();
        setProfile();
        setTableNonEditable();
        loadBenhAn();
        jList.requestFocusInWindow();
        jList.setSelectedIndex(0);
        jListValueChangedHandle();
        setVisible(true);
    }

    public void loadBenhAn() {
        String sql = new String("SELECT \"GhiChu\" FROM \"BenhAn\" WHERE \"IDBN\" = ?");
        try {
            stmt = con.prepareStatement(sql);
            stmt.setString(1, IDBN);
            result = stmt.executeQuery();
            if (result.next()) {
                taBenhAn.setText(result.getString("GhiChu"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(BenhNhan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void saveBenhAn() {
        String sql = new String("UPDATE \"BenhAn\" SET \"GhiChu\" = ? WHERE \"IDBN\" = ?");
        try {
            stmt = con.prepareStatement(sql);
            stmt.setString(1, taBenhAn.getText().trim());
            stmt.setString(2, IDBN);
            stmt.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(BenhNhan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbHS = new javax.swing.JLabel();
        lbTime = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        lbID = new javax.swing.JLabel();
        lbNS = new javax.swing.JLabel();
        lbT = new javax.swing.JLabel();
        lbDC = new javax.swing.JLabel();
        lbGT = new javax.swing.JLabel();
        lbBHYT = new javax.swing.JLabel();
        bClose = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        bAdd = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        taBenhAn = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        lbHS.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lbHS.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbHS.setText("Hồ sơ bệnh nhân ...");

        lbTime.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        lbID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbID.setText("ID:");

        lbNS.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbNS.setText("Ngày sinh: ");

        lbT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbT.setText("Tuổi:");

        lbDC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbDC.setText("Địa chỉ:");

        lbGT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbGT.setText("Giới tính:");

        lbBHYT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbBHYT.setText("BHYT:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbID)
                    .addComponent(lbNS)
                    .addComponent(lbT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 303, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbBHYT)
                    .addComponent(lbGT)
                    .addComponent(lbDC))
                .addGap(320, 320, 320))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbDC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbGT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbBHYT))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbID, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbNS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbT)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bClose.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bClose.setText("Đóng hồ sơ\n bệnh nhân");
        bClose.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bCloseFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bCloseFocusLost(evt);
            }
        });
        bClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCloseActionPerformed(evt);
            }
        });
        bClose.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bCloseKeyPressed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Lịch sử:");

        jList.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Điều trị", "Chẩn đoán", "Theo dõi", "Kê đơn", "Xét nghiệm" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListMouseClicked(evt);
            }
        });
        jList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jListKeyPressed(evt);
            }
        });
        jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList);

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable);

        bAdd.setFont(new java.awt.Font("Tahoma", 1, 70)); // NOI18N
        bAdd.setText("+");
        bAdd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bAddFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bAddFocusLost(evt);
            }
        });
        bAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddActionPerformed(evt);
            }
        });
        bAdd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bAddKeyPressed(evt);
            }
        });

        taBenhAn.setColumns(20);
        taBenhAn.setRows(5);
        taBenhAn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                taBenhAnFocusGained(evt);
            }
        });
        taBenhAn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taBenhAnKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(taBenhAn);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Bệnh án:");

        jMenuBar1.add(jMenu1);
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbHS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbHS, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bAdd))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lbHS, lbTime});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCloseActionPerformed
        saveBenhAn();
        this.dispose();
//        System.exit(0);
    }//GEN-LAST:event_bCloseActionPerformed

    private void jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListValueChanged
        if (evt.getValueIsAdjusting()) {//chi thuc hien 1 lan: http://stackoverflow.com/questions/11163025/valuechanged-gui-list-executing-twice
            jListValueChangedHandle();
        }
    }//GEN-LAST:event_jListValueChanged

    public void jListValueChangedHandle() {
        resetTableModel();
        switch (jList.getSelectedValue()) {
            case "Điều trị":
                loadTableDieuTri();
                break;
            case "Chẩn đoán":
                loadTableChanDoan();
                break;
            case "Theo dõi":
                loadTableTheoDoi();
                break;
            case "Kê đơn":
                loadTableKeDon();
                break;
            case "Xét nghiệm":
                loadTableXetNghiem();
                break;
            default:
        }
    }

    private void bAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddActionPerformed
        String itemSelected = jList.getSelectedValue();
//        System.out.println(itemSelected);

        switch (itemSelected) {
            case "Điều trị":
//                JOptionPane.showMessageDialog(null, "open frame insert Điều trị");
                InsertDieuTri insertDieuTri = new InsertDieuTri(IDBS, IDBN);
                break;
            case "Chẩn đoán":
//                JOptionPane.showMessageDialog(null, "open frame insert Chẩn đoán");
                InsertChanDoan insertChanDoan = new InsertChanDoan(IDBS, IDBN);
                break;
            case "Theo dõi":
//                JOptionPane.showMessageDialog(null, "open frame insert Theo dõi");
                InsertTheoDoi insertTheoDoi = new InsertTheoDoi(IDBS, IDBN);
                break;
            case "Kê đơn":
//                JOptionPane.showMessageDialog(null, "open frame insert Kê đơn");
                InsertKeDon insertKeDon = new InsertKeDon(IDBS, IDBN);
                break;
            case "Xét nghiệm":
//                JOptionPane.showMessageDialog(null, "open frame insert Xét nghiệm");
                InsertXetNghiem insertXetNghiem = new InsertXetNghiem(IDBS, IDBN);
                break;
            default:
        }
    }//GEN-LAST:event_bAddActionPerformed

    private void taBenhAnFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taBenhAnFocusGained
        taBenhAn.selectAll();
    }//GEN-LAST:event_taBenhAnFocusGained

    private void bCloseFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bCloseFocusGained
        bClose.setBackground(Color.GRAY);
        bClose.setForeground(Color.WHITE);
    }//GEN-LAST:event_bCloseFocusGained

    private void bCloseFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bCloseFocusLost
        bClose.setBackground(Color.LIGHT_GRAY);
        bClose.setForeground(Color.BLACK);
    }//GEN-LAST:event_bCloseFocusLost

    private void bAddFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bAddFocusGained
        bAdd.setBackground(Color.GRAY);
        bAdd.setForeground(Color.WHITE);
    }//GEN-LAST:event_bAddFocusGained

    private void bAddFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bAddFocusLost
        bAdd.setBackground(Color.LIGHT_GRAY);
        bAdd.setForeground(Color.BLACK);
    }//GEN-LAST:event_bAddFocusLost

    private void jListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            bAdd.doClick();
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            jTable.requestFocusInWindow();
        } else if (jList.getSelectedIndex() == 0 && evt.getKeyCode() == KeyEvent.VK_UP) {
            bClose.requestFocusInWindow();
        } else if (jList.getSelectedIndex() == jList.getLastVisibleIndex() && evt.getKeyCode() == KeyEvent.VK_DOWN) {
            bAdd.requestFocusInWindow();
        } else {
            jListValueChangedHandle();
        }
    }//GEN-LAST:event_jListKeyPressed

    private void bAddKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bAddKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            bAdd.doClick();
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            jTable.requestFocusInWindow();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            jList.requestFocusInWindow();
            jList.setSelectedValue(jList.getLastVisibleIndex(), true);
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            taBenhAn.requestFocusInWindow();
        }
    }//GEN-LAST:event_bAddKeyPressed

    private void jTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            bClose.requestFocusInWindow();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            bClose.requestFocusInWindow();
        } 
    }//GEN-LAST:event_jTableKeyPressed

    private void bCloseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bCloseKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            jList.requestFocusInWindow();
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            jTable.requestFocusInWindow();
        }
    }//GEN-LAST:event_bCloseKeyPressed

    private void taBenhAnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taBenhAnKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            bAdd.requestFocusInWindow();
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saveBenhAn();
            JOptionPane.showMessageDialog(null, "Đã lưu bệnh án");
        }
    }//GEN-LAST:event_taBenhAnKeyPressed

    private void jListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListMouseClicked
        if (evt.getClickCount() == 2) {
            bAdd.doClick();
        }
    }//GEN-LAST:event_jListMouseClicked

    public String getIDBN() {
        return IDBN;
    }

    public void loadTableDieuTri() {
        String sql = new String("SELECT \"IDKhoa\", \"Ten\", \"LyDo\", \"Time\" FROM \"DieuTri\" NATURAL JOIN \"Khoa\" WHERE \"IDBN\" = ? ORDER BY \"Time\"");
        try {
            int numberColumns;
            stmt = con.prepareStatement(sql);
            stmt.setString(1, IDBN);
            result = stmt.executeQuery();
            {//load columns name from DB
                ResultSetMetaData metaData = result.getMetaData();
                numberColumns = metaData.getColumnCount();
                ArrayList<String> columnsName = new ArrayList<String>();
                columnsName.add("IDKhoa");
                columnsName.add("Tên Khoa");
                columnsName.add("Lý do");
                columnsName.add("Thời gian");

                tableModel.setColumnIdentifiers(columnsName.toArray());
            }
            {//load Row from DB
                ArrayList<String> arrayRows = new ArrayList<String>();
                while (result.next()) {
                    arrayRows.clear();
                    for (int i = 1; i <= numberColumns; i++) {
                        arrayRows.add(result.getString(i));
                    }
                    tableModel.addRow(arrayRows.toArray());
                }
                jTable.setModel(tableModel);

            }
            {//set non edit able//truyen vao gi cung dc
                jTable.isCellEditable(0, 0);
            }
        } catch (SQLException ex) {
            Logger.getLogger(BenhNhan.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void loadTableChanDoan() {
        String sql = new String("SELECT \"IDBS\", \"TenBS\", \"IDBenh\", \"TenBenh\", \"Time\" FROM (SELECT \"IDBS\", \"Ten\" \"TenBS\" FROM \"BacSi\") ba NATURAL JOIN (SELECT * FROM \"ChanDoan\" WHERE \"IDBN\" = ?) cd NATURAL JOIN (SELECT \"IDBenh\", \"Ten\" \"TenBenh\" FROM \"Benh\") b");
        try {
            int numberColumns;
            stmt = con.prepareStatement(sql);
            stmt.setString(1, IDBN);
            result = stmt.executeQuery();
            {//load columns name from DB
                ResultSetMetaData metaData = result.getMetaData();
                numberColumns = metaData.getColumnCount();
                ArrayList<String> columnsName = new ArrayList<String>();
                columnsName.add("ID Bác sĩ chẩn đoán");
                columnsName.add("Tên Bác sĩ chẩn đoán");
                columnsName.add("ID bệnh được chẩn đoán");
                columnsName.add("Tên bệnh được chẩn đoán");
                columnsName.add("Thời gian");

                tableModel.setColumnIdentifiers(columnsName.toArray());
            }
            {//load Row from DB
                ArrayList<String> arrayRows = new ArrayList<String>();
                while (result.next()) {
                    arrayRows.clear();
                    for (int i = 1; i <= numberColumns; i++) {
                        arrayRows.add(result.getString(i));
                    }
                    tableModel.addRow(arrayRows.toArray());
                }
                jTable.setModel(tableModel);

            }
        } catch (SQLException ex) {
            Logger.getLogger(BenhNhan.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void loadTableTheoDoi() {
        String sql = new String("SELECT \"IDBS\", ba.\"Ten\", \"KetQua\", \"TimeBD\", \"TimeKT\" FROM \"TheoDoi\" c NATURAL JOIN (Select \"IDBS\", \"Ten\" FROM \"BacSi\") ba WHERE \"IDBN\" = ? ORDER BY \"TimeBD\"");
        try {
            int numberColumns;
            stmt = con.prepareStatement(sql);
            stmt.setString(1, IDBN);
            result = stmt.executeQuery();
            {//load columns name from DB
                ResultSetMetaData metaData = result.getMetaData();
                numberColumns = metaData.getColumnCount();
                ArrayList<String> columnsName = new ArrayList<String>();
                columnsName.add("ID Bác sĩ chẩn đoán");
                columnsName.add("Tên Bác sĩ chẩn đoán");
                columnsName.add("Kết quả");
                columnsName.add("Thời gian bắt đầu theo dõi");
                columnsName.add("Thời gian kết thúc theo dõi");

                tableModel.setColumnIdentifiers(columnsName.toArray());
            }
            {//load Row from DB
                ArrayList<String> arrayRows = new ArrayList<String>();
                while (result.next()) {
                    arrayRows.clear();
                    for (int i = 1; i <= numberColumns; i++) {
                        arrayRows.add(result.getString(i));
                    }
                    tableModel.addRow(arrayRows.toArray());
                }
                jTable.setModel(tableModel);

            }
        } catch (SQLException ex) {
            Logger.getLogger(BenhNhan.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void loadTableKeDon() {
        String sql = new String("SELECT \"IDBS\", \"TenBS\", \"IDThuoc\", \"Ten\" \"TenThuoc\" , \"SoLuong\", \"Time\" FROM (SELECT \"IDBS\", \"Ten\" \"TenBS\", \"IDThuoc\", \"SoLuong\", \"Time\" FROM \"KeDon\" NATURAL JOIN \"BacSi\" WHERE \"IDBN\" = ?) a NATURAL JOIN \"Thuoc\" ");
        try {
            int numberColumns;
            stmt = con.prepareStatement(sql);
            stmt.setString(1, IDBN);
            System.out.println(stmt);
            result = stmt.executeQuery();
            {//load columns name from DB
                ResultSetMetaData metaData = result.getMetaData();
                numberColumns = metaData.getColumnCount();
                ArrayList<String> columnsName = new ArrayList<String>();

                columnsName.add("ID Bác sĩ chẩn đoán");
                columnsName.add("Tên Bác sĩ chẩn đoán");
                columnsName.add("ID thuốc");
                columnsName.add("Tên thuốc");
                columnsName.add("Số lượng");
                columnsName.add("Thời điểm kê đơn ");

                tableModel.setColumnIdentifiers(columnsName.toArray());
            }
            {//load Row from DB
                ArrayList<String> arrayRows = new ArrayList<String>();
                while (result.next()) {
                    arrayRows.clear();
                    for (int i = 1; i <= numberColumns; i++) {
                        arrayRows.add(result.getString(i));
                    }
                    tableModel.addRow(arrayRows.toArray());
                }
                jTable.setModel(tableModel);

            }
        } catch (SQLException ex) {
            Logger.getLogger(BenhNhan.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void loadTableXetNghiem() {
        String sql = new String("SELECT \"IDBS\", \"TenBS\", \"IDXN\", \"Ten\" \"TenXN\", \"KetQua\", \"Time\" FROM (SELECT * FROM \"YeuCauXetNghiem\" WHERE \"IDBN\" = ?) yc NATURAL JOIN (SELECT \"IDBS\", \"Ten\" \"TenBS\" FROM \"BacSi\") ba NATURAL JOIN \"XetNghiem\" ORDER BY \"Time\"");
        try {
            int numberColumns;
            stmt = con.prepareStatement(sql);
            stmt.setString(1, IDBN);
            System.out.println(stmt);
            result = stmt.executeQuery();
            {//load columns name from DB
                ResultSetMetaData metaData = result.getMetaData();
                numberColumns = metaData.getColumnCount();
                ArrayList<String> columnsName = new ArrayList<String>();

                columnsName.add("ID Bác sĩ thực hiện");
                columnsName.add("Tên Bác sĩ thực hiện");
                columnsName.add("ID xét nghiệm");
                columnsName.add("Tên xét nghiệm");
                columnsName.add("Kết quả");
                columnsName.add("Thời điểm thực hiện");

                tableModel.setColumnIdentifiers(columnsName.toArray());
            }
            {//load Row from DB
                ArrayList<String> arrayRows = new ArrayList<String>();
                while (result.next()) {
                    arrayRows.clear();
                    for (int i = 1; i <= numberColumns; i++) {
                        arrayRows.add(result.getString(i));
                    }
                    tableModel.addRow(arrayRows.toArray());
                }
                jTable.setModel(tableModel);

            }
        } catch (SQLException ex) {
            Logger.getLogger(BenhNhan.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void resetTableModel() {
        if (tableModel.getRowCount() >= 1) {
            for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {//tinh tu 0
                tableModel.removeRow(i);
            }
        }
    }

    public void setTableNonEditable() {
        tableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

    }

    public void setTime() {
        DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss dd-MM-yyyy");
        Thread timeSet = new Thread() {
            @Override
            public void run() {
                try {
                    for (int i = 0; i < 10000000; i++) {
                        Date date = new Date();
                        String time = dateFormat.format(date);
                        lbTime.setText(time);
                        Thread.sleep(1000);
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(BenhNhan.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        timeSet.start();
    }

    public void setProfile() {
        String sql = new String("SELECT * FROM \"BenhNhan\" WHERE \"IDBN\" = ?");
        try {
            stmt = con.prepareStatement(sql);
            stmt.setString(1, IDBN);
            result = stmt.executeQuery();
            if (result.next()) {
                lbHS.setText("Hồ sơ bệnh nhân: " + result.getString("Ten").trim());
                lbID.setText("ID: " + result.getString("IDBN").trim());
                lbNS.setText("Ngày sinh: " + result.getString("NgaySinh").trim());
                if (result.getString("GioiTinh").trim().equals("0")) {
                    lbGT.setText("Giới tính: Nữ");
                } else {
                    lbGT.setText("Giới tính: Nam");

                }
                lbDC.setText("Địa chỉ: " + result.getString("DiaChi").trim());
                if (result.getString("isBHYT").trim().equals("0")) {
                    lbBHYT.setText("BHYT: Không");
                } else {
                    lbBHYT.setText("BHYT: Có");
                }
                lbT.setText("Tuổi: " + result.getString("Tuoi").trim());
            }

        } catch (SQLException ex) {
            Logger.getLogger(BenhNhan.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BenhNhan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BenhNhan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BenhNhan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BenhNhan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BenhNhan("BS0001", "BN0001").setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAdd;
    private javax.swing.JButton bClose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable;
    private javax.swing.JLabel lbBHYT;
    private javax.swing.JLabel lbDC;
    private javax.swing.JLabel lbGT;
    private javax.swing.JLabel lbHS;
    private javax.swing.JLabel lbID;
    private javax.swing.JLabel lbNS;
    private javax.swing.JLabel lbT;
    private javax.swing.JLabel lbTime;
    private javax.swing.JTextArea taBenhAn;
    // End of variables declaration//GEN-END:variables
}
